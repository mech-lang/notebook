# Expressions

Mech expressions are operate element wise over its inputs. This means that instead of using a loop to iterate over an array and applying an operator to the element of the array, in Mech you apply the operator to the entire array, and Mech takes care of the rest.

Expressions work as long as the inputs are the same dimension, or both of the inputs are scalar. For example, we can multiply two vectors as long as they are the same size, and the multiplication operator will pair corresponding elements of the two vectors and perform the multiplication operation using those as inputs. Or, we can multiply a vector times a scalar, and the scalar will be used as an input to each of the multiplication operations. Let's see how this works for the different expressions: math expressions, inequality expression, and logic expressions.

## Math Expressions

Math expressions are the built-in arithmatic operators (add `+`, subtract `-`, multiply `*`, divide `/`, and exponentiate `^`), as well as functions in the math and stat libraries. The simplest mathematical expression is with two scalars as input:

  block/view = 1 + 2

We can also add two scalar variables:

  x = 1
  y = 2
  block/view = x + y

Things get a little more interesting when we add two vectors:

  x = [1 2 3]
  y = [4 5 6]
  block/view = x + y

Now we can see that the add operator is defined to work element-wise on the input. This works for column vectors:

  x = [1; 2; 3]
  y = [4; 5; 6]
  block/view = x + y

And matrices as well:

  x = [1 2 3
       4 5 6]
  y = [7  8  9
       10 11 12]
  block/view = x * y

Note that multiplying two matricies with the multiply operator does not perform matrix multiplication, but element-wise multiplication.

We can also multiply a vector by a scalar:
  
  x = 5
  y = [7 8 9]
  block/view = x * y
 
## Inequality Expressions

Inequality expressions work with the inequality operators (greater than `>`, greater than or equal to `>=`, less than `<`, less than or equal to `<=`, equal to `==` and not equal to `!=`). The output of an inequality expression is a Boolean value. Like the math expressions, inequality expressions work element-wise on their inputs.

  x = [1 2 3]
  y = [3 2 1]
  block/view = x > y

## Logic Expressions

Logic expressions work with the logic operators (and `&`, along with or `|`). The input for a logic expression is a Boolean vectore, and the output is a Boolean vector as well.

  x = [1 2 3]
  block/view = x < 3 & x > 1

We can do or operations as well


  x = [1 2 3]
  block/view = x < 2 | x > 2


Up Next: <a href="#/docs/core/temporal.mec">Temporal Operators</a>